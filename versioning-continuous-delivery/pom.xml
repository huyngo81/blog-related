<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>de.philipphauer.blog</groupId>
	<artifactId>versioning-continuous-delivery</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>jar</packaging>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.3.5.RELEASE</version>
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.8</java.version>

		<!-- IntelliJ grouses the following dynamic properties. Workaround: Settings > Build, Execution, Development > Build Tools > Maven > Runner > Properties. Add git.commit.time and git.commit.id.abbrev with empty value. -->
		<version.number>${git.commit.time}.${git.commit.id.abbrev}</version.number>
		<docker.repository.name>huyaws/${project.artifactId}</docker.repository.name>
		<!-- Instead of docker hub, you can use your own registry: -->
		<!--<docker.repository.name>registry.domain.de/group/${project.artifactId}</docker.repository.name>-->
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<version>2.2.4</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>revision</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<dateFormat>yyyyMMdd-HHmmss</dateFormat><!--  human-readable part of the version id -->
					<dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
					<generateGitPropertiesFile>false</generateGitPropertiesFile><!-- somehow necessary. otherwise the variables are not available in the pom -->
				</configuration>
			</plugin>

			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.21.0</version>
				<extensions>true</extensions>
				<configuration>
                    <!-- a) use "docker login" up front to store the credentials on the local machine. -->
                    <!-- or b) comment in the following snippet: -->
					<!--<authConfig>-->
						<!--<username>phauer</username>-->
						<!--<password>docker123</password>-->
					<!--</authConfig>-->
					<images>
						<image>
							<name>${docker.repository.name}:${version.number}</name>
							<alias>${project.artifactId}</alias>
							<build>
								<from>openjdk:8-alpine</from>
								<tags><!-- define additional tags for the image -->
									<tag>latest</tag>
								</tags>
								<assembly>
									<descriptorRef>artifact</descriptorRef>
								</assembly>
								<ports>
									<port>8080</port>
								</ports>
								<cmd>
									<shell>
										java -jar /maven/${project.build.finalName}.jar
									</shell>
								</cmd>
							</build>
						</image>
					</images>
				</configuration>
				<executions>
					<execution>
						<id>build-docker-image</id>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
					<execution>
						<id>push-docker-image-to-registry</id>
						<phase>deploy</phase>
						<goals>
							<goal>push</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>maven-install-plugin</artifactId>
				<configuration>
					<skip>true</skip> <!-- we push the container image to the local registry instead -->
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<configuration>
					<skip>true</skip> <!--  we push the image instead  -->
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
